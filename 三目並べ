package Lesson8_3;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;
import java.util.Scanner;

public class TicTac {

	static ArrayList<Integer> playerPositons = new ArrayList<Integer>();// vi tri player
	static ArrayList<Integer> cpuPositons = new ArrayList<Integer>(); // vi tri cpu
	static List topRow = Arrays.asList(1, 2, 3);
	static List midRow = Arrays.asList(4, 5, 6);
	static List botRow = Arrays.asList(7, 8, 9);
	static List leftCol = Arrays.asList(1, 4, 7);
	static List midCol = Arrays.asList(2, 5, 8);
	static List rightCol = Arrays.asList(3, 6, 9);
	static List cross1 = Arrays.asList(1, 5, 9);
	static List cross2 = Arrays.asList(3, 5, 7);

	static int mode;

	public static void main(String[] args) {
		Scanner scan = new Scanner(System.in);
		System.out.println("====三目並べ====");
		System.out.println("====================");
		System.out.println(" '7'|'8'|'9'");
		System.out.println(" '-'+'-'+'-'");
		System.out.println(" '4'|'5'|'6'");
		System.out.println(" '-'+'-'+'-'");
		System.out.println(" '1'|'2'|'3'");
		System.out.println("ルール");
		System.out.println("二人が交互に「○」と「×」を書き込んでいき3つ並べる");
		System.out.println("最終的にビンゴのように、");
		System.out.println("縦・横・斜めのいずれか1列に");
		System.out.println("3個自分のマークを並べると勝ちとなる。");
		System.out.println("レベルを選んでください。");
		System.out.println("1:ちょう簡単  2:簡単  3:ノ簡単");

		mode = scan.nextInt();

		char[][] gameBoard = { { ' ', '|', ' ', '|', ' ' }, { '-', '+', '-', '+', '-' }, { ' ', '|', ' ', '|', ' ' },
				{ '-', '+', '-', '+', '-' }, { ' ', '|', ' ', '|', ' ' } };
		printGameBoard(gameBoard);

		while (true) {

			System.out.println("Enter your placement(1-9)");
			// player
			int playerPos = scan.nextInt();
			while (playerPositons.contains(playerPos) || cpuPositons.contains(playerPos)) {
				System.out.println("エラー、他のところを付けてください。");// neu trung nhau
				playerPos = scan.nextInt();
			}
			System.out.println(playerPos);
			placePiece(gameBoard, playerPos, "player");
			// cpu
			String result = checkWinner();
			if (result.length() > 0) {
				System.out.println(result);
				break;
			}

			Random rand = new Random();
			int cpuPos = rand.nextInt(9) + 1;
			int finalPos = getFinalPosition();
			if (mode > 1 && finalPos > 0 && (mode == 3 || !playerPositons.contains(finalPos))) {
				cpuPos = finalPos;

			} else {
				while (playerPositons.contains(cpuPos) || cpuPositons.contains(cpuPos)) {
					// neu trung nhau
					cpuPos = rand.nextInt(9) + 1;
				}
			}
			placePiece(gameBoard, cpuPos, "cpu");

			printGameBoard(gameBoard);

			result = checkWinner();
			if (result.length() > 0) {
				System.out.println(result);

				break;
			}
			System.out.println(result);
		}
	}

	public static int getFinalPosition() {

		@SuppressWarnings("rawtypes")
		List[] winRows = { topRow,
				midRow,
				botRow,
				leftCol,
				midCol,
				rightCol,
				cross1,
				cross2 };

		for (int w = 0; w < winRows.length; w++) {
			List<Integer> hit = new ArrayList<>();
			List<Integer> notHit = new ArrayList<>();
			for (int i = 0; i < winRows[w].size(); i++) {
				int pos = (int) winRows[w].get(i);
				if (cpuPositons.contains(pos)) {
					hit.add(pos);
				} else {
					notHit.add(pos);
				}
			}
			if (hit.size() == 2 && notHit.size() == 1) {
				return notHit.get(0);
			}
		}

		return 0;
	}

	public static void printGameBoard(char[][] gameBoard) {
		for (char[] row : gameBoard) {
			for (char c : row) {
				System.out.print(c);
			}
			System.out.println();
		}

	}

	public static void placePiece(char[][] gameBoard, int pos, String user) {

		char symbol = 'X';

		if (user.equals("player")) {
			symbol = 'X';
			playerPositons.add(pos);
		} else if (user.equals("cpu")) {
			symbol = 'O';
			cpuPositons.add(pos);
		}

		switch (pos) {
		case 7:
			gameBoard[0][0] = symbol;
			break;
		case 8:
			gameBoard[0][2] = symbol;
			break;
		case 9:
			gameBoard[0][4] = symbol;
			break;
		case 4:
			gameBoard[2][0] = symbol;
			break;
		case 5:
			gameBoard[2][2] = symbol;
			break;
		case 6:
			gameBoard[2][4] = symbol;
			break;
		case 1:
			gameBoard[4][0] = symbol;
			break;
		case 2:
			gameBoard[4][2] = symbol;
			break;
		case 3:
			gameBoard[4][4] = symbol;
			break;
		default:
			break;
		}

	}

	public static String checkWinner() {

		List<List> winning = new ArrayList<List>();
		winning.add(topRow);
		winning.add(midRow);
		winning.add(botRow);
		winning.add(leftCol);
		winning.add(midCol);
		winning.add(rightCol);
		winning.add(cross1);
		winning.add(cross2);

		for (List l : winning) {
			if (playerPositons.containsAll(l)) {
				return "you won";
			} else if (cpuPositons.containsAll(l)) {
				return "CPU win";
			}
		}
		if (playerPositons.size() + cpuPositons.size() == 9) {
			return "Cat!";
		}

		return "";

	}

}
